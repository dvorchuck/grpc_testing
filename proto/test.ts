// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/test.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "transfer";

export interface TestRequest {
  data: string;
}

export interface TestInfo {
  a: string;
  b: string;
}

export interface TestResponse {
  success: boolean;
}

function createBaseTestRequest(): TestRequest {
  return { data: "" };
}

export const TestRequest: MessageFns<TestRequest> = {
  encode(message: TestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestRequest {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: TestRequest): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestRequest>, I>>(base?: I): TestRequest {
    return TestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestRequest>, I>>(object: I): TestRequest {
    const message = createBaseTestRequest();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseTestInfo(): TestInfo {
  return { a: "", b: "" };
}

export const TestInfo: MessageFns<TestInfo> = {
  encode(message: TestInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.a !== "") {
      writer.uint32(10).string(message.a);
    }
    if (message.b !== "") {
      writer.uint32(18).string(message.b);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.a = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.b = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestInfo {
    return {
      a: isSet(object.a) ? globalThis.String(object.a) : "",
      b: isSet(object.b) ? globalThis.String(object.b) : "",
    };
  },

  toJSON(message: TestInfo): unknown {
    const obj: any = {};
    if (message.a !== "") {
      obj.a = message.a;
    }
    if (message.b !== "") {
      obj.b = message.b;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestInfo>, I>>(base?: I): TestInfo {
    return TestInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestInfo>, I>>(object: I): TestInfo {
    const message = createBaseTestInfo();
    message.a = object.a ?? "";
    message.b = object.b ?? "";
    return message;
  },
};

function createBaseTestResponse(): TestResponse {
  return { success: false };
}

export const TestResponse: MessageFns<TestResponse> = {
  encode(message: TestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: TestResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestResponse>, I>>(base?: I): TestResponse {
    return TestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestResponse>, I>>(object: I): TestResponse {
    const message = createBaseTestResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type TestServiceService = typeof TestServiceService;
export const TestServiceService = {
  test: {
    path: "/transfer.TestService/Test",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestRequest) => Buffer.from(TestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestRequest.decode(value),
    responseSerialize: (value: TestResponse) => Buffer.from(TestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestResponse.decode(value),
  },
} as const;

export interface TestServiceServer extends UntypedServiceImplementation {
  test: handleUnaryCall<TestRequest, TestResponse>;
}

export interface TestServiceClient extends Client {
  test(request: TestRequest, callback: (error: ServiceError | null, response: TestResponse) => void): ClientUnaryCall;
  test(
    request: TestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestResponse) => void,
  ): ClientUnaryCall;
  test(
    request: TestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestResponse) => void,
  ): ClientUnaryCall;
}

export const TestServiceClient = makeGenericClientConstructor(
  TestServiceService,
  "transfer.TestService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TestServiceClient;
  service: typeof TestServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
