// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/test.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "test";

export interface Value {
  doubleList?: DoubleList | undefined;
  stringList?: StringList | undefined;
}

export interface Value2 {
  doubleList: number[];
  stringList: string[];
}

export interface DoubleList {
  values: number[];
}

export interface StringList {
  values: string[];
}

function createBaseValue(): Value {
  return { doubleList: undefined, stringList: undefined };
}

export const Value: MessageFns<Value> = {
  encode(message: Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.doubleList !== undefined) {
      DoubleList.encode(message.doubleList, writer.uint32(10).fork()).join();
    }
    if (message.stringList !== undefined) {
      StringList.encode(message.stringList, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.doubleList = DoubleList.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringList = StringList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value {
    return {
      doubleList: isSet(object.doubleList) ? DoubleList.fromJSON(object.doubleList) : undefined,
      stringList: isSet(object.stringList) ? StringList.fromJSON(object.stringList) : undefined,
    };
  },

  toJSON(message: Value): unknown {
    const obj: any = {};
    if (message.doubleList !== undefined) {
      obj.doubleList = DoubleList.toJSON(message.doubleList);
    }
    if (message.stringList !== undefined) {
      obj.stringList = StringList.toJSON(message.stringList);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Value>, I>>(base?: I): Value {
    return Value.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Value>, I>>(object: I): Value {
    const message = createBaseValue();
    message.doubleList = (object.doubleList !== undefined && object.doubleList !== null)
      ? DoubleList.fromPartial(object.doubleList)
      : undefined;
    message.stringList = (object.stringList !== undefined && object.stringList !== null)
      ? StringList.fromPartial(object.stringList)
      : undefined;
    return message;
  },
};

function createBaseValue2(): Value2 {
  return { doubleList: [], stringList: [] };
}

export const Value2: MessageFns<Value2> = {
  encode(message: Value2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.doubleList) {
      writer.double(v);
    }
    writer.join();
    for (const v of message.stringList) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 9) {
            message.doubleList.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.doubleList.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringList.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value2 {
    return {
      doubleList: globalThis.Array.isArray(object?.doubleList)
        ? object.doubleList.map((e: any) => globalThis.Number(e))
        : [],
      stringList: globalThis.Array.isArray(object?.stringList)
        ? object.stringList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Value2): unknown {
    const obj: any = {};
    if (message.doubleList?.length) {
      obj.doubleList = message.doubleList;
    }
    if (message.stringList?.length) {
      obj.stringList = message.stringList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Value2>, I>>(base?: I): Value2 {
    return Value2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Value2>, I>>(object: I): Value2 {
    const message = createBaseValue2();
    message.doubleList = object.doubleList?.map((e) => e) || [];
    message.stringList = object.stringList?.map((e) => e) || [];
    return message;
  },
};

function createBaseDoubleList(): DoubleList {
  return { values: [] };
}

export const DoubleList: MessageFns<DoubleList> = {
  encode(message: DoubleList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.double(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoubleList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoubleList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 9) {
            message.values.push(reader.double());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.double());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoubleList {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: DoubleList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DoubleList>, I>>(base?: I): DoubleList {
    return DoubleList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoubleList>, I>>(object: I): DoubleList {
    const message = createBaseDoubleList();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseStringList(): StringList {
  return { values: [] };
}

export const StringList: MessageFns<StringList> = {
  encode(message: StringList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringList {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StringList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringList>, I>>(base?: I): StringList {
    return StringList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringList>, I>>(object: I): StringList {
    const message = createBaseStringList();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
